{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xAEf7A94b0c32509F5c847f50e4Ce829D9452CfD7",
    "txHash": "0xd199390c85a6e7c3c12e05f54db2f8ecda1df705ca6bb5c924d44da4ad483741"
  },
  "proxies": [
    {
      "address": "0x27a339d9B59b21390d7209b78a839868E319301B",
      "txHash": "0xb40fce823a8ab08562705109b08a893378060e6acca0c3c59c5ef5aab078c25e",
      "kind": "transparent"
    },
    {
      "address": "0xbd9a24a97bF3A30E982fF597F28EAA915240e960",
      "txHash": "0x19738cf19c16c24a1eed928293e2edde0e54953adc83fb5466167e71ca77de94",
      "kind": "transparent"
    },
    {
      "address": "0x88a9d39CC8CBa99BAFF507478fe56b4dAEC0901b",
      "txHash": "0xc8816ea3b7af9c4acde17e70e1be4a3f54d2794ca6c36a66ab395669bca4f9b6",
      "kind": "transparent"
    },
    {
      "address": "0x81a527e2f7c681be45cAaDAa8d2B4fB79264526F",
      "txHash": "0x1f189083198f6b1aabcf535ffed2392730bc7d8ca87accb9a029b93afb71977d",
      "kind": "transparent"
    },
    {
      "address": "0xC697601fCE2982fD337e2d00D061A25FEB88601c",
      "txHash": "0x794f97044f3971dbf54222a6cab7223eba0a98068c0750f60b9ff1f861070cf7",
      "kind": "transparent"
    },
    {
      "address": "0xC38470BFE1b08c3baFDaf699eBa2fCA1fd2B040B",
      "txHash": "0x77b3bb11014a4a4e49cd0cda083a13c0fee9e83a91a5dbc55fe4f9482d5b82d2",
      "kind": "transparent"
    },
    {
      "address": "0x52683412f6Ea2B6302ceA8406EfF928510466c2c",
      "txHash": "0xc84058ec3a001675075370324b4037f5f2be4d066ec36cb0ec1d28dcb5855f4a",
      "kind": "transparent"
    },
    {
      "address": "0x455dA436D170e490de887781b906FCf03ddECF02",
      "txHash": "0x5b4d69de353dc46db38112f879d23d1dc28673ea2c41e8ced4c448b8ac7b064d",
      "kind": "transparent"
    },
    {
      "address": "0xB67FbdEFb2c6a051A9dc14362Fee6C5BF5897746",
      "txHash": "0x89b75c953890e6f0e69f64e5dd914ea7179af49a86656550157376ceee4633ae",
      "kind": "transparent"
    },
    {
      "address": "0x8BA9f0841cFA75d7e2c7a316b048b04c98C95cA4",
      "txHash": "0x9562d4033cd5da96f651f6e19eb48aacb877911bd39b09625f0a39c7dc88191c",
      "kind": "transparent"
    },
    {
      "address": "0x0e1D8437c30deF77578EB70ae566AfFE6f082724",
      "txHash": "0x444e7e1e330fa54882c973cb6406c972f5c5f60abdbb579452ad8f994326243c",
      "kind": "transparent"
    },
    {
      "address": "0xFc658Da47B952223Fbf2AB0a00dCc609d07a2E32",
      "txHash": "0x2f05123d8ea319189165dc218adc2b39ab88268044e756fb518c265fd8b8d2fa",
      "kind": "transparent"
    },
    {
      "address": "0x8ff772c006269262b6b38602E2882f7D0C6C3393",
      "txHash": "0xd1ccbb2f00067e9416bafe67bfeb6ac890ec071ee103b99deba33eb818953dc6",
      "kind": "transparent"
    },
    {
      "address": "0x450aF324eC34A0FBE9c6df6a7954786fFEF5fC5c",
      "txHash": "0xc914cb6b6e94a66e451f5fc04633c84f5d767a17b35e91b5147aedbf7f42a996",
      "kind": "transparent"
    },
    {
      "address": "0x9030944F3d6D203c8cC8907Ef192A7d45fA39A99",
      "txHash": "0x88e77f3e78932d62c41965368e952bec1ffa33b767df6fd4d01f61a19bb1b1c4",
      "kind": "transparent"
    },
    {
      "address": "0x633f5bbff95CE461a135d1a7482ebC52Cf5b1B5b",
      "txHash": "0x026e2e4451d1ca95626f9bf6dae581f7d8974de60f83fdb73e059222539e699a",
      "kind": "transparent"
    },
    {
      "address": "0x5Cd54F1AbaE3ABE3d79111868CD99b453b571AE8",
      "txHash": "0x87ba0623e749b2fca12201ca8503620b7c3fa7f0a4f86e1bace61695338ddd20",
      "kind": "transparent"
    },
    {
      "address": "0x29317C450496958fE15bC0076591a04fb5Bbb766",
      "txHash": "0x2cd075eae827c5fd6a7430bdd398a268ff75fa48c40d6b98bf742073504f15b8",
      "kind": "transparent"
    },
    {
      "address": "0xAadfa537ecA54d3d7655C4117bBFB83B9bF6035a",
      "txHash": "0x06f0a3f647ad80794561f448bafcb469b9856a5e1f1842aa642ad728bac33dae",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c66366ad07278ce329626e197899ba3394427a966ef52023e89eb49a595b3113": {
      "address": "0xd3E87D729878cD466C31cCB917efb971730556F4",
      "txHash": "0x7ab25c18f383fe345cec50d5a2e74b17437b9bffff1748f2535b7e8cc3a55fe3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC20PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "xBlade",
            "label": "tokenBlacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:12"
          },
          {
            "contract": "xBlade",
            "label": "_sellAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:13"
          },
          {
            "contract": "xBlade",
            "label": "_exceptionAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:14"
          },
          {
            "contract": "xBlade",
            "label": "_nextClaimTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/xBlade.sol:15"
          },
          {
            "contract": "xBlade",
            "label": "canClaim",
            "type": "t_bool",
            "src": "../project:/contracts/xBlade.sol:17"
          },
          {
            "contract": "xBlade",
            "label": "sellFeeRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:18"
          },
          {
            "contract": "xBlade",
            "label": "feeAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:19"
          },
          {
            "contract": "xBlade",
            "label": "rewardCycleBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:20"
          },
          {
            "contract": "xBlade",
            "label": "threshHoldTopUpRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:21"
          },
          {
            "contract": "xBlade",
            "label": "stakerAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "d1aeed5a89ff658bb43e38dba7281b1922f7b78de44764fa78dca75886bfdc7d": {
      "address": "0x488c0F82C3c3b8260B4ac21264274780DE033bDD",
      "txHash": "0x5ef44bf5bd46569b830c365ed9b27b924e09b24d02f81321a20a0e7396c23059",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC20PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "xBlade",
            "label": "tokenBlacklist",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:12"
          },
          {
            "contract": "xBlade",
            "label": "_sellAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:13"
          },
          {
            "contract": "xBlade",
            "label": "_exceptionAddresses",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/xBlade.sol:14"
          },
          {
            "contract": "xBlade",
            "label": "_nextClaimTime",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/xBlade.sol:15"
          },
          {
            "contract": "xBlade",
            "label": "canClaim",
            "type": "t_bool",
            "src": "../project:/contracts/xBlade.sol:17"
          },
          {
            "contract": "xBlade",
            "label": "sellFeeRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:18"
          },
          {
            "contract": "xBlade",
            "label": "feeAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:19"
          },
          {
            "contract": "xBlade",
            "label": "rewardCycleBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:20"
          },
          {
            "contract": "xBlade",
            "label": "threshHoldTopUpRate",
            "type": "t_uint256",
            "src": "../project:/contracts/xBlade.sol:21"
          },
          {
            "contract": "xBlade",
            "label": "stakerAddress",
            "type": "t_address",
            "src": "../project:/contracts/xBlade.sol:22"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "70b7f75448f84f166800751fa9a7ff0dd08eb010aacc6549e98a75498fb96722": {
      "address": "0xaC5CceF4629bff451867edcD86c31dEE0864A242",
      "txHash": "0x79ef9eb9a7c0cb9686a3dc4d6310f77db3fee834133633ec5ef4067aee3be0cf",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)20037_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)20042_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:87"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "../project:/contracts/characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "priceRate",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "availableAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:103"
          }
        ],
        "types": {
          "t_array(t_struct(Character)20037_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)20037_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)20042_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)20042_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3d01146b319e9cd4ff67a8849b2a0fed8d1981aaf5e1d3d1c7291481b9ab57f4": {
      "address": "0x9E6B44e080a67d3309A92D3c80730dE6560dFfe5",
      "txHash": "0xc269dabf77be40862e417429e717e4a238052ab22f66b319a648c295c8120d93",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)27356_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)",
            "src": "../project:/contracts/weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)27356_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)27356_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)27368_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)27363_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "498e2a0b3757e479509d6aec2c2acfebb9b98f681a684fb0bae2c243d547bfca": {
      "address": "0x3289d71Fc107Bb2a686879e35895Bae6634a1DF9",
      "txHash": "0x8f238698be427960b3d2ab39deeabb3e674912f3889148ac5eeceef37ef5b751",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Promos",
            "label": "bits",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/Promos.sol:27"
          },
          {
            "contract": "Promos",
            "label": "firstCharacterPromoInGameOnlyFundsGivenInUsd",
            "type": "t_int128",
            "src": "../project:/contracts/Promos.sol:33"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e57de8cbb88068cec4d549b21bd7b2bf5bdb8b51d5adbaac6bdec7e449da641a": {
      "address": "0xdD3493dEcAC2bD82391fd6fd2f3a6c983372a015",
      "txHash": "0xd19b78c97794fa3f9b8b08a0b0425c3baff263a940e9e07e40acbfdb463dfeb2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Blacksmith",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/Blacksmith.sol:27"
          },
          {
            "contract": "Blacksmith",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/Blacksmith.sol:28"
          },
          {
            "contract": "Blacksmith",
            "label": "tickets",
            "type": "t_mapping(t_address,t_uint32)",
            "src": "../project:/contracts/Blacksmith.sol:30"
          },
          {
            "contract": "Blacksmith",
            "label": "shields",
            "type": "t_contract(Shields)24496",
            "src": "../project:/contracts/Blacksmith.sol:32"
          },
          {
            "contract": "Blacksmith",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/Blacksmith.sol:33"
          },
          {
            "contract": "Blacksmith",
            "label": "itemAddresses",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../project:/contracts/Blacksmith.sol:36"
          },
          {
            "contract": "Blacksmith",
            "label": "itemFlatPrices",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/Blacksmith.sol:37"
          }
        ],
        "types": {
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_mapping(t_address,t_uint32)": {
            "label": "mapping(address => uint32)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint32": {
            "label": "uint32"
          },
          "t_contract(Shields)24496": {
            "label": "contract Shields"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1325ebd78a13bbb4ed59fbb1ec77e531d6a248c3408428a5d11a885e930db99d": {
      "address": "0xbc215Bca8cD21d811504402BAd9Bd6875A5F57b5",
      "txHash": "0x4c6ad53f22343fd2f42a5603dd5c2a1ac85b65a720f257eb647224cb5bb66b85",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21704",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21750",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21704": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21750": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e3e391409e380a1300a9cd5edea2fe06021747e3c47182e7a84bdc2d92b43007": {
      "address": "0x8087ee61FC0c42d4A39f3ec78Bf69b245A684880",
      "txHash": "0x17d86ec6f6f58925e7e20cf047792f5c533605cb7f7bfff6f89b767923cbc8e0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "MultiAccessUpgradeable",
            "label": "access",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/multiAccessUpgradeable.sol:8"
          },
          {
            "contract": "Raid",
            "label": "completed",
            "type": "t_bool",
            "src": "../project:/contracts/raid.sol:15"
          },
          {
            "contract": "Raid",
            "label": "expectedFinishTime",
            "type": "t_uint256",
            "src": "../project:/contracts/raid.sol:16"
          },
          {
            "contract": "Raid",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/raid.sol:18"
          },
          {
            "contract": "Raid",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/raid.sol:19"
          },
          {
            "contract": "Raid",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/raid.sol:20"
          },
          {
            "contract": "Raid",
            "label": "raiders",
            "type": "t_array(t_struct(Raider)22227_storage)dyn_storage",
            "src": "../project:/contracts/raid.sol:28"
          },
          {
            "contract": "Raid",
            "label": "participation",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../project:/contracts/raid.sol:29"
          },
          {
            "contract": "RaidBasic",
            "label": "staminaDrain",
            "type": "t_uint64",
            "src": "../project:/contracts/raidBasic.sol:12"
          },
          {
            "contract": "RaidBasic",
            "label": "weaponDrops",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "../project:/contracts/raidBasic.sol:13"
          },
          {
            "contract": "RaidBasic",
            "label": "bounty",
            "type": "t_uint256",
            "src": "../project:/contracts/raidBasic.sol:14"
          },
          {
            "contract": "RaidBasic",
            "label": "bossTrait",
            "type": "t_uint8",
            "src": "../project:/contracts/raidBasic.sol:15"
          },
          {
            "contract": "RaidBasic",
            "label": "totalPower",
            "type": "t_uint256",
            "src": "../project:/contracts/raidBasic.sol:17"
          }
        ],
        "types": {
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_array(t_struct(Raider)22227_storage)dyn_storage": {
            "label": "struct Raid.Raider[]"
          },
          "t_struct(Raider)22227_storage": {
            "label": "struct Raid.Raider",
            "members": [
              {
                "label": "owner",
                "type": "t_uint256"
              },
              {
                "label": "charID",
                "type": "t_uint256"
              },
              {
                "label": "wepID",
                "type": "t_uint256"
              },
              {
                "label": "power",
                "type": "t_uint24"
              }
            ]
          },
          "t_uint24": {
            "label": "uint24"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          }
        }
      }
    },
    "ccd3035b53d920c57aaf863d94a79567f506510e61a7943931d33dd7d3b40ab6": {
      "address": "0xe474F205d4FBDd21C0b1E0E709776E46a6722b84",
      "txHash": "0x95697d97cc41f6794cb0f74c76bebd375a6fa58e6f20975a5bc9cdf99d1a6624",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "SecretBox",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/SecretBox.sol:14"
          },
          {
            "contract": "SecretBox",
            "label": "game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/SecretBox.sol:16"
          },
          {
            "contract": "SecretBox",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/SecretBox.sol:17"
          },
          {
            "contract": "SecretBox",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/SecretBox.sol:18"
          },
          {
            "contract": "SecretBox",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/SecretBox.sol:20"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxPrice",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:22"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxPrice",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:23"
          },
          {
            "contract": "SecretBox",
            "label": "commonBoxAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:24"
          },
          {
            "contract": "SecretBox",
            "label": "rareBoxAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/SecretBox.sol:25"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d462a73ebd7474c377ab8edca79f006068b483471c885812abd5a0691fac47c4": {
      "address": "0xfe50D30f787BfAD9296332C86F4bf8252c3E2c1a",
      "txHash": "0xb7fc5ec540e9e43f3eade8fbc3f7a3ca3b495c5cb2ec0e78186f77fa391a50b3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "NFTMarket",
            "label": "skillToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/NFTMarket.sol:70"
          },
          {
            "contract": "NFTMarket",
            "label": "taxRecipient",
            "type": "t_address",
            "src": "../project:/contracts/NFTMarket.sol:71"
          },
          {
            "contract": "NFTMarket",
            "label": "listings",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15705_storage))",
            "src": "../project:/contracts/NFTMarket.sol:75"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenIDs",
            "type": "t_mapping(t_address,t_struct(UintSet)7366_storage)",
            "src": "../project:/contracts/NFTMarket.sol:77"
          },
          {
            "contract": "NFTMarket",
            "label": "listedTokenTypes",
            "type": "t_struct(AddressSet)7245_storage",
            "src": "../project:/contracts/NFTMarket.sol:79"
          },
          {
            "contract": "NFTMarket",
            "label": "isTokenBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:82"
          },
          {
            "contract": "NFTMarket",
            "label": "isUserBanned",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:84"
          },
          {
            "contract": "NFTMarket",
            "label": "tax",
            "type": "t_mapping(t_address,t_int128)",
            "src": "../project:/contracts/NFTMarket.sol:87"
          },
          {
            "contract": "NFTMarket",
            "label": "freeTax",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../project:/contracts/NFTMarket.sol:89"
          },
          {
            "contract": "NFTMarket",
            "label": "defaultTax",
            "type": "t_int128",
            "src": "../project:/contracts/NFTMarket.sol:90"
          },
          {
            "contract": "NFTMarket",
            "label": "allowedTokenTypes",
            "type": "t_struct(AddressSet)7245_storage",
            "src": "../project:/contracts/NFTMarket.sol:93"
          },
          {
            "contract": "NFTMarket",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/NFTMarket.sol:95"
          },
          {
            "contract": "NFTMarket",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/NFTMarket.sol:96"
          }
        ],
        "types": {
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)15705_storage))": {
            "label": "mapping(address => mapping(uint256 => struct NFTMarket.Listing))"
          },
          "t_mapping(t_uint256,t_struct(Listing)15705_storage)": {
            "label": "mapping(uint256 => struct NFTMarket.Listing)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Listing)15705_storage": {
            "label": "struct NFTMarket.Listing",
            "members": [
              {
                "label": "seller",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(UintSet)7366_storage)": {
            "label": "mapping(address => struct EnumerableSet.UintSet)"
          },
          "t_struct(UintSet)7366_storage": {
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6980_storage"
              }
            ]
          },
          "t_struct(Set)6980_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(AddressSet)7245_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)6980_storage"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_int128)": {
            "label": "mapping(address => int128)"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d2a551780dde6a79ebc984418859c0f22118f00f3c12fcf92ac60d89b5fd6440": {
      "address": "0x80ceb112dEfDeE0626969c6c71CE9Fd3D1beBBdA",
      "txHash": "0x9423f71938477874cc827497373f75c522762664e4804b42cebd5f2ee9b85111",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "../project:/contracts/staking/RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "../project:/contracts/staking/FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:38"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:41"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:44"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoWars)15278",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:48"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(CryptoWars)15278": {
            "label": "contract CryptoWars"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "74d807bf77f29c2ea850d45abf2e54176c870166b50dfdf121a9358e3dc33b3f": {
      "address": "0xBe67D7Dbf14967109dFDB6bFCDE8C57bb76F78BB",
      "txHash": "0x0d98f8c8a6cad28c03cb4ea51bd9c5cd098c9b7533690b7d7eba07405a825345",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Shields",
            "label": "tokens",
            "type": "t_array(t_struct(Shield)22940_storage)dyn_storage",
            "src": "../project:/contracts/shields.sol:59"
          },
          {
            "contract": "Shields",
            "label": "cosmetics",
            "type": "t_array(t_struct(ShieldCosmetics)22945_storage)dyn_storage",
            "src": "../project:/contracts/shields.sol:60"
          },
          {
            "contract": "Shields",
            "label": "shieldBaseMultiplier",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:62"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:63"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointDEF",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:64"
          },
          {
            "contract": "Shields",
            "label": "defenseMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/shields.sol:65"
          },
          {
            "contract": "Shields",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/shields.sol:67"
          },
          {
            "contract": "Shields",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/shields.sol:68"
          },
          {
            "contract": "Shields",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/shields.sol:70"
          },
          {
            "contract": "Shields",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/shields.sol:75"
          }
        ],
        "types": {
          "t_array(t_struct(Shield)22940_storage)dyn_storage": {
            "label": "struct Shields.Shield[]"
          },
          "t_struct(Shield)22940_storage": {
            "label": "struct Shields.Shield",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_array(t_struct(ShieldCosmetics)22945_storage)dyn_storage": {
            "label": "struct Shields.ShieldCosmetics[]"
          },
          "t_struct(ShieldCosmetics)22945_storage": {
            "label": "struct Shields.ShieldCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "63055268def2a0b388ac4780bf0fdbacb561894004cf82a62b4d84c24f4b2fd4": {
      "address": "0x99982CAa45F42d6C67f69C71069788300F1e2aFa",
      "txHash": "0xf20669be41eb8fae419621260834d5c628480f8ad61cee4e2cab8f9156f21382",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21003",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30152",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21740",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21704",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21750",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21003": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30152": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21740": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21704": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21750": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "16e4defb8203d3ac96feae04eff3db779e5b7d2e1c5061f11b87980ef8bb3c0c": {
      "address": "0xa7f00d7272Bb1D410cEC203B4b8077D99077b515",
      "txHash": "0xfbe80366bceac025405d5706ff76585a4a9439f594d17866e20de7e53f3cd226",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)27356_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)",
            "src": "../project:/contracts/weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)18041",
            "src": "../project:/contracts/weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)27356_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)27356_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)27368_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)27368_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27363_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)27363_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)18041": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee244d16584ffd0e490acf78c2651066eef4a1875d9b8030f85947f33c866c42": {
      "address": "0x95e30bd46B66Ea5C3e6B4D45F727Fd26741dD963",
      "txHash": "0xbadd9feeec365768ef93384ac15498cf9697fdbe0b5a205372bcc945133e8fab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21014",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30163",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21751",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21715",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18052",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21761",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21014": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30163": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21751": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21715": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18052": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21761": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "89440df28be55d70cfc5a943089706b121d32c71563e381bfe161539250991ef": {
      "address": "0x49891a35027b7482f3d8c791C0A4ab3FF11d882D",
      "txHash": "0xa3eff98dbe217548c63a153c8e879b731e9a67174159e73f4ab01a4cc93424fe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21053",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30202",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21790",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21754",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18091",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21800",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21053": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30202": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21790": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21754": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18091": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21800": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "29bcfea5925515b54a08973a4f1fd20c0d5b1f51bc6212887b6366e814c47910": {
      "address": "0xcC7860619381788267CeFD44ec3190796D16eee6",
      "txHash": "0xe5011720f9f6b54511fce4f4793f2ec4c35243f8764181c472e023ced995cc28",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)20074_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)20079_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:87"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "../project:/contracts/characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)18078",
            "src": "../project:/contracts/characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "priceRate",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "availableAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:103"
          }
        ],
        "types": {
          "t_array(t_struct(Character)20074_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)20074_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)20079_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)20079_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18078": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "922b9cd9a580d41c812910e901fe9db9b13368d12cca279be3f326fc2c919fae": {
      "address": "0x8ceE4148C28268D9f540D8dCD0611290dB680709",
      "txHash": "0xfe58d23faa3395707a8708448b8b5f221dc19dcaf06ef249cf151bfd88be034b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21087",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30378",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21824",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21788",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18078",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21834",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          }
        ],
        "types": {
          "t_contract(Characters)21087": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30378": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21824": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21788": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18078": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21834": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8d3649a19e85bd7aed7d734847ac27f1f68d16444bfe27ad35ac8dcb5c8a18e3": {
      "address": "0xB60433f74433A56809b644b542E559ba5aF8bd9a",
      "txHash": "0xd61cdba610cfaf96b240e61d77be6c229efb39071720937e0dfa99d7c4eed9f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21141",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30432",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21878",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21842",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18132",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21888",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21141": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30432": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21878": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21842": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18132": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21888": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2fa7ead2e8c8a4af9274dfee3c77c17c7bfcaa8f911fddea780dcc953a65af8e": {
      "address": "0x2A439235C1E587E19A95c7FB1Dd34e56820eA926",
      "txHash": "0xcda0e2770834dee22c1956410dadbd15cadf7b7f4353bfbf36ff68b10690d850",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21154",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30445",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21891",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21855",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18145",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21901",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21154": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30445": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21891": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21855": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18145": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21901": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e8ddf6f5ed5c29fe0d148c1ca688021460701f4b100932bd1203c50d4e80d88e": {
      "address": "0x815A66d7F0Ad987267F257e835d2449769471D5F",
      "txHash": "0x793d517bd2eecf4ee6373887dda2f48554d17317612ed95de6f1f5af943c35e6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21173",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30464",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21910",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21874",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18164",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21920",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21173": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30464": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21910": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21874": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18164": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21920": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "39c66cfc57b166fa4e97e7e80f584fcb4a31bc83cb27ada34b0941c0510970d9": {
      "address": "0x183C042B4D4103657f81719BaB76349D1255F9f2",
      "txHash": "0x7f96d6bfcdd3a63a800dcb4f71f26fb13f508f5417179daffe901033e09e6000",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Weapons",
            "label": "tokens",
            "type": "t_array(t_struct(Weapon)27668_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:88"
          },
          {
            "contract": "Weapons",
            "label": "cosmetics",
            "type": "t_array(t_struct(WeaponCosmetics)27680_storage)dyn_storage",
            "src": "../project:/contracts/weapons.sol:89"
          },
          {
            "contract": "Weapons",
            "label": "burnPoints",
            "type": "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27675_storage)",
            "src": "../project:/contracts/weapons.sol:90"
          },
          {
            "contract": "Weapons",
            "label": "burnPointMultiplier",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:92"
          },
          {
            "contract": "Weapons",
            "label": "lowStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:93"
          },
          {
            "contract": "Weapons",
            "label": "fourStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:94"
          },
          {
            "contract": "Weapons",
            "label": "fiveStarBurnPowerPerPoint",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:95"
          },
          {
            "contract": "Weapons",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:97"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointBasic",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:98"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointPWR",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:99"
          },
          {
            "contract": "Weapons",
            "label": "powerMultPerPointMatching",
            "type": "t_int128",
            "src": "../project:/contracts/weapons.sol:100"
          },
          {
            "contract": "Weapons",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:103"
          },
          {
            "contract": "Weapons",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/weapons.sol:104"
          },
          {
            "contract": "Weapons",
            "label": "durabilityTimestamp",
            "type": "t_mapping(t_uint256,t_uint64)",
            "src": "../project:/contracts/weapons.sol:106"
          },
          {
            "contract": "Weapons",
            "label": "burnDust",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/weapons.sol:111"
          },
          {
            "contract": "Weapons",
            "label": "promos",
            "type": "t_contract(Promos)18164",
            "src": "../project:/contracts/weapons.sol:113"
          }
        ],
        "types": {
          "t_array(t_struct(Weapon)27668_storage)dyn_storage": {
            "label": "struct Weapons.Weapon[]"
          },
          "t_struct(Weapon)27668_storage": {
            "label": "struct Weapons.Weapon",
            "members": [
              {
                "label": "properties",
                "type": "t_uint16"
              },
              {
                "label": "stat1",
                "type": "t_uint16"
              },
              {
                "label": "stat2",
                "type": "t_uint16"
              },
              {
                "label": "stat3",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_struct(WeaponCosmetics)27680_storage)dyn_storage": {
            "label": "struct Weapons.WeaponCosmetics[]"
          },
          "t_struct(WeaponCosmetics)27680_storage": {
            "label": "struct Weapons.WeaponCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_struct(WeaponBurnPoints)27675_storage)": {
            "label": "mapping(uint256 => struct Weapons.WeaponBurnPoints)"
          },
          "t_struct(WeaponBurnPoints)27675_storage": {
            "label": "struct Weapons.WeaponBurnPoints",
            "members": [
              {
                "label": "lowStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fourStarBurnPoints",
                "type": "t_uint8"
              },
              {
                "label": "fiveStarBurnPoints",
                "type": "t_uint8"
              }
            ]
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_uint256,t_uint64)": {
            "label": "mapping(uint256 => uint64)"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(Promos)18164": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee4595a42b50f084ddf20506f0ca4139633c0f854f7daf2446ce1807e8ba87ca": {
      "address": "0x1fA56671ccFA16fFBe3f46E22c87b94e4a08143E",
      "txHash": "0x087f53fe3b4b02e79f30bdd4f4acd87df9a8b35b3c4985e33f4a5d18c51eaf15",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RewardsDistributionRecipientUpgradeable",
            "label": "rewardsDistribution",
            "type": "t_address",
            "src": "../project:/contracts/staking/RewardsDistributionRecipientUpgradeable.sol:9"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "FailsafeUpgradeable",
            "label": "failsafeModeActive",
            "type": "t_bool",
            "src": "../project:/contracts/staking/FailsafeUpgradeable.sol:7"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:29"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "stakingToken",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:30"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:31"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardRate",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:32"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardsDuration",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:33"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:34"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:35"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewardPerTokenStored",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:36"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "feePercent",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:37"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "__game",
            "type": "t_contract(CryptoWars)15413",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:40"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:42"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "rewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:43"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:45"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:46"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "_stakeTimestamp",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:47"
          },
          {
            "contract": "StakingRewardsUpgradeable",
            "label": "minimumStakeAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/staking/StakingRewardsUpgradeable.sol:50"
          }
        ],
        "types": {
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CryptoWars)15413": {
            "label": "contract CryptoWars"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b25c5ca2a0235658df7fa0301111a409125833697247011d163e65a3c9eafe32": {
      "address": "0x54d400e04bfC541F4C2eb3D80472deC04A5e9384",
      "txHash": "0xd1143c61c96be9b5d90191185661cf674af088b266fb1c686c7325004e1d6c1d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)20160_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)20165_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:87"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "../project:/contracts/characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)18164",
            "src": "../project:/contracts/characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "priceRate",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "availableAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:103"
          }
        ],
        "types": {
          "t_array(t_struct(Character)20160_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)20160_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)20165_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)20165_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18164": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "2dacf4067029d1138c6b36a381b6722e14782543a5a59959e6c74a0464ce9bc2": {
      "address": "0x34940520134aaF9A46c62262CF6F3D3C47D4BA8a",
      "txHash": "0xd44c7c852dc146e827eacf52a7b2abdc92366a7b7a6fcc361fe2800f0e46b901",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21184",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30475",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21921",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21885",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18164",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21931",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11225",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21184": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30475": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21921": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21885": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18164": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21931": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11225": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "80b01d58fe9e24386bcbbdbea44308ea07d327d2d9f6ce5e3124f1628c7d6d9a": {
      "address": "0xf7a1D6040dCa0436eB46214282586699cfBB0910",
      "txHash": "0x12d4e60c8dc387b72bc7a8bf41b25c10d624011bb883890e7ae060a9e377ae72",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21197",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30501",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21934",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21898",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18147",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21944",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21197": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30501": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21934": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21898": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18147": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21944": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "417acd78e67e3e17c45d2fee70a73fb911e10b9f8e5286e7146c1081f3cd036e": {
      "address": "0x52Bb6D859776abcab89368a2f809C63185a23e0a",
      "txHash": "0xea13e50634eb1adb7c9d75617f8e5ceb37fc15b14ab5291b78cb6c5eb8f7a92a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21197",
            "src": "../project:/contracts/CryptoWars.sol:40"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30501",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)21934",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)21898",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:109"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:111"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:117"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:122"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:124"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:126"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18147",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:137"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)21944",
            "src": "../project:/contracts/CryptoWars.sol:139"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:141"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:143"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:149"
          }
        ],
        "types": {
          "t_contract(Characters)21197": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30501": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)21934": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)21898": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18147": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)21944": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a11d7955881425fdb65ab99c266cfa5c9959dc3f785e3f5b8880f489f52ee21c": {
      "address": "0xba8EB2c6e71b738AA7e841BE29b4Be190FFF7f3B",
      "txHash": "0x6fcd60a3e71f8fe7d3fdeb34a71f9834f894d42de66834a5d12d36cf5a9e0eb0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "7b2000fee05eee8d82851aeb92249ccdba7d5a03ab08083fa61bd2803bb4086b": {
      "address": "0x6531142EEa721EB793E000450720dF7857610D13",
      "txHash": "0x7f75de3e61816a61925ea3f0060385f18a66f7d994d89eec2d9aa12fcd91600a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21662",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)30966",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22399",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22363",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:110"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:118"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:121"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:128"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:131"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:134"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18612",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22409",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:145"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:148"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11753",
            "src": "../project:/contracts/CryptoWars.sol:151"
          }
        ],
        "types": {
          "t_contract(Characters)21662": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)30966": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22399": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22363": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18612": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22409": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11753": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "06cdd283bb2a18335a7826c5ba4ec96a6f7b2098a9b8c6a64d79a3a474f875da": {
      "address": "0x79fEdA1A9bc5854e43a32cf7d013b4636B7738ad",
      "txHash": "0x8eeed00188055e74841910b68a12d83cc6d2a099e7c3f8b1a9468b60cf6d7f66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21666",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31079",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22403",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22367",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18616",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22413",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11753",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21666": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31079": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22403": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22367": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18616": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22413": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11753": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "602afd391dea4019134c8ec8036928d7e1042578665170f6962de15f77a84b6d": {
      "address": "0x795E755fcb0af32aE6544dB318b6A55fD2BCc974",
      "txHash": "0x1f6ab1747e26b47114bb9ea5734db0173e798284d6c000cf6b414dabf6e1ca7f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4436_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3813_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Characters",
            "label": "tokens",
            "type": "t_array(t_struct(Character)20662_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:86"
          },
          {
            "contract": "Characters",
            "label": "cosmetics",
            "type": "t_array(t_struct(CharacterCosmetics)20667_storage)dyn_storage",
            "src": "../project:/contracts/characters.sol:87"
          },
          {
            "contract": "Characters",
            "label": "experienceTable",
            "type": "t_array(t_uint256)256_storage",
            "src": "../project:/contracts/characters.sol:92"
          },
          {
            "contract": "Characters",
            "label": "lastTransferTimestamp",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/characters.sol:94"
          },
          {
            "contract": "Characters",
            "label": "promos",
            "type": "t_contract(Promos)18636",
            "src": "../project:/contracts/characters.sol:96"
          },
          {
            "contract": "Characters",
            "label": "lastMintedBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:98"
          },
          {
            "contract": "Characters",
            "label": "firstMintedOfLastBlock",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:99"
          },
          {
            "contract": "Characters",
            "label": "characterLimit",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:101"
          },
          {
            "contract": "Characters",
            "label": "priceRate",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:102"
          },
          {
            "contract": "Characters",
            "label": "availableAmount",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:103"
          },
          {
            "contract": "Characters",
            "label": "staminaLevelRange",
            "type": "t_uint256",
            "src": "../project:/contracts/characters.sol:104"
          }
        ],
        "types": {
          "t_array(t_struct(Character)20662_storage)dyn_storage": {
            "label": "struct Characters.Character[]"
          },
          "t_struct(Character)20662_storage": {
            "label": "struct Characters.Character",
            "members": [
              {
                "label": "xp",
                "type": "t_uint16"
              },
              {
                "label": "level",
                "type": "t_uint8"
              },
              {
                "label": "trait",
                "type": "t_uint8"
              },
              {
                "label": "staminaTimestamp",
                "type": "t_uint64"
              }
            ]
          },
          "t_uint16": {
            "label": "uint16"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_array(t_struct(CharacterCosmetics)20667_storage)dyn_storage": {
            "label": "struct Characters.CharacterCosmetics[]"
          },
          "t_struct(CharacterCosmetics)20667_storage": {
            "label": "struct Characters.CharacterCosmetics",
            "members": [
              {
                "label": "version",
                "type": "t_uint8"
              },
              {
                "label": "seed",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)256_storage": {
            "label": "uint256[256]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18636": {
            "label": "contract Promos"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_struct(UintSet)4436_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4436_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(UintToAddressMap)3813_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3495_storage"
              }
            ]
          },
          "t_struct(Map)3495_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3487_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3487_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3487_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "11692f64f229a33a38999d68be8dc5ec78416193f6758d963f1a76487e10959e": {
      "address": "0xb336DF02DcdD6A433ED4F0500816F07666A4f70f",
      "txHash": "0x9cc5acc7ac99ff197fd2cc9fdf3ee3f280abad05380c018d8f4ea73c68c8f09d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21697",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31171",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22434",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22398",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18580",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22444",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11753",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21697": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31171": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22434": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22398": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18580": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22444": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11753": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f48a628d4d07a59fb93f0d97709fd03d3cee4e95077a601ee36eb77c7b687aba": {
      "address": "0x1a354d146E1f6aB8a68C1e3c0ac48d36d47A1965",
      "txHash": "0xc504525e757017e490c74331a856d48d47efd30affff8ab22e51e74c52664230",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21697",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31168",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22434",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22398",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18580",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22444",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11753",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21697": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31168": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22434": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22398": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18580": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22444": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11753": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cd109cc614d16c65f880f591987707082b8250fbe91ead301af55df7c5c4ade1": {
      "address": "0xCBC9C078dF5491a02a26e38a4d126FF4e2cEEA0a",
      "txHash": "0x8d3835704c2a38762e87a4c354157819207957e5043194ecfd89f6e2e9e3e99c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "989150de95beb2511ae0057e6e44a9357a64eb8d0779a5857a8245cfb3da1944": {
      "address": "0xd85037f239cB7F9A4f6D9B6ABbcFCA3b01439Be5",
      "txHash": "0xb56e20fee3d255d738ad5cc72807c9ad27998f6ee84712025349d7be24ed75b5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "05a41c98c65fc49d0940472069f5e1e5f9bc7346c42c5ea5cd12af39c71afb1f": {
      "address": "0xFadC2D20055C7Dc68C92B6AaEaF9cF63de1DFd0a",
      "txHash": "0xbae14c326deacc56c4e9fba1d8d2f78afb86da64f3797da730eeec679e1ba8c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21753",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31224",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22490",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22454",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18636",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22500",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21753": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31224": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22490": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22454": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18636": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22500": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "43fa9c7afa8c005dd2d3192998198d759f72d4e96547089c33a8dcbbfffe3299": {
      "address": "0xE4C66cf840cB4C4E358134B6baa9F2bc8f89C0eB",
      "txHash": "0xf81516eb861f88afde022fe524d2eac0ede610429ffb4270ace9fc3bd7eb1cab",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21753",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31224",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22490",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22454",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18636",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22500",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21753": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31224": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22490": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22454": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18636": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22500": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ee4d016b057c122687198ed7105804bbe9e4281af01d95e07785f1e1b0182667": {
      "address": "0x56A2B4797E3181241433089675c00f26ca42c153",
      "txHash": "0x0a038564bf40a5674f90b4c2440bd2f589c625770482e3b44f5279dc6116399c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8343c3fa5952ce7a36ef7c4bb2600ae49f7ca18a3d448861668b3ac25ad1cc8c": {
      "address": "0x03D92D0BB21d8aaC64BDbea27E472B8261d18cA0",
      "txHash": "0xab61d421250ea01c3fab370aa3b5acf29a56b51db9a855c5b4e0638882f6fea2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "00e293ea4dedfc0af7cf26db75824c1fb90cfac8041f22929b3974ae49eb9475": {
      "address": "0x29Bf42dDAB3D88eb45d13fa7FaeC87532BE531b1",
      "txHash": "0xf0c90d2b4ef75100fac074526a2785f6e4ad76c7ea1b115cad445fc9ad2af03f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21765",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31236",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22502",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22466",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18648",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22512",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21765": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31236": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22502": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22466": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18648": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22512": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "736e22397712eb3f43a16dcaac73e210938979d753e0799885f91cfaa8a287c8": {
      "address": "0x3e1AcBc4d751D42a095104b45933FDC7bB519Aee",
      "txHash": "0x4eec98bc19a2cca7346b96198f43494664d8cd3fcb1292b2c7fc211221b17696",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21753",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31224",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22490",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22454",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18636",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22500",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21753": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31224": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22490": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22454": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18636": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22500": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "35701382fb5bf7281015db0cdaca7dc54c744a8dbac71c4e85c9eb4163a68a60": {
      "address": "0x8ABc7465a8f0B10257082555450B156dB7FA5b94",
      "txHash": "0xe834092487fd69b60e579128fbdc38331f11b9f2aaacbd7a8290749cf694abca",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "52dffa1fdc08fa4e14d33a82bc6ae4b72061dfa1730797ca768d263c56697855": {
      "address": "0x842076dbB60c482d9A8e4e6cb6E7645803e571EF",
      "txHash": "0x58c45842e38242a11df5c1a0f65cda22483a129fb74496e0ade2a66bb37c33a8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "../project:/contracts/CWController.sol:10"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:11"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "../project:/contracts/CWController.sol:15"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "bf81f08d496fec10636af0d3f37f9a6fcbd854c9f7e5dc058026c41207d16c2a": {
      "address": "0x9a4b5Fe82BE733FA46ebd2FE984574Eb7E027604",
      "txHash": "0x0d3c7077ffb6ed829c55f1a52b59b6478a960afc921f52317450a8b36e91bde5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21753",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31224",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22490",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22454",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18636",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22500",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21753": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31224": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22490": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22454": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18636": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22500": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ca0990fd2f1efa59c6c404c7b5f15832250004666cf3182fbe7d57569ea56a6f": {
      "address": "0x6e37014332f5dCBfEb04FDCc428829EF8484c461",
      "txHash": "0x14c1ae5ebe69064fac453ff285214fc2545cd7831ed6ac722e69efe0b45b7806",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21756",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31227",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22493",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22457",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18639",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22503",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21756": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31227": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22493": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22457": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18639": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22503": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "39a66799938338175fb1b4c7d7d978831ad3f60ccb560c89865517e829f5c0ec": {
      "address": "0x9E7Bcd1d4276a8F18583a53608e82cC620c8A87E",
      "txHash": "0xc3e46a0a92339f914cfe7ab76bbf88784c726ab182de5b983eee31e300caef6e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21773",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31244",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22510",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22474",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18656",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22520",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21773": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31244": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22510": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22474": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18656": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22520": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ad14b4b65fb3570d8dcf352ff9492fe9864b81b15644fbd56ac353d6ae08f533": {
      "address": "0xA18f5B913e44B492788b6b26c8C639d6013f2CD5",
      "txHash": "0x78309186076cc9943e474180a89074b502e1bd341e3078bdd5cbfbf33036d573",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21777",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31245",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22514",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22478",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18660",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22524",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21777": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31245": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22514": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22478": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18660": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22524": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fdd8ce8df89e1462eee448834422ddf961c66096e6828578e116da2699e3e7c6": {
      "address": "0x4c1a633c7126c60e899BEaF19fa2f18EE3475D11",
      "txHash": "0x492f068225382a551b1e19386b80c6170c5782fe9ac654279269e6effba15b8b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21777",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31245",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22514",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22478",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18660",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22524",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21777": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31245": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22514": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22478": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18660": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22524": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1738e6adce5068bb1786f43c66f3a65fc22ee16028f312b608c370dd219b98c6": {
      "address": "0x37315D6BbE0E12e558Be448b12D717C0646Be39F",
      "txHash": "0xc276cd8190bdc68119c4871a2cae66e03e19b0341b7286d90e265e009d5e2c66",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21759",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31230",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22496",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22460",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18642",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22506",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21759": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31230": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22496": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22460": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18642": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22506": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "71096f5a12c38f1f4ba9afaa80ff0cd1820ea23bd136cebfb959083d8cff13cf": {
      "address": "0x4D000827F3e2a121dd7d695aE25De377428ABB96",
      "txHash": "0x9f16a7b73c503d804fbd8e89eb458b7c9393dff9c8bc49761a10bbbf48e85728",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)447_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)21732",
            "src": "../project:/contracts/CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)31203",
            "src": "../project:/contracts/CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)6321",
            "src": "../project:/contracts/CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)22469",
            "src": "../project:/contracts/CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)22433",
            "src": "../project:/contracts/CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)18615",
            "src": "../project:/contracts/CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../project:/contracts/CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)22479",
            "src": "../project:/contracts/CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "../project:/contracts/CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "../project:/contracts/CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)11237",
            "src": "../project:/contracts/CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "../project:/contracts/CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "../project:/contracts/CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)11809",
            "src": "../project:/contracts/CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)21732": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)31203": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)6321": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)22469": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)22433": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)18615": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)22479": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)11237": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)11809": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)447_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)447_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4315_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4315_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4050_storage"
              }
            ]
          },
          "t_struct(Set)4050_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "44f7c60787e276b7e92fc3ab607f6ad484d8ec441929a0ee136bac9917f753a9": {
      "address": "0xb99A757Ae99c9FF774B24e17a1a291027b75d504",
      "txHash": "0x41a335a40a06098090e8b2fbeae39315a8362e1c08ed2dcb5aee39525d39ddbe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)22330_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)11467",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)20953",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)28204",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)12204",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)12168",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)8350",
            "src": "CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)12214",
            "src": "CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)865",
            "src": "CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)1545",
            "src": "CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)11467": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)20953": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)28204": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)12204": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)12168": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)8350": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)12214": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)865": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)1545": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)22330_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)22330_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)26198_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)26198_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)25933_storage"
              }
            ]
          },
          "t_struct(Set)25933_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f417b2e3d51fe44c007c9bd8824fe9965f2a3ecf4574ef00e2339768c8af1097": {
      "address": "0x77f915E15D9E0BA61019D7e6f4F9d4Ed8688eE64",
      "txHash": "0x30ff26916aa4509e2408ba6804477ef397defa03513a8082f90c9624a0778f2c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "CWController.sol:14"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "CWController.sol:15"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "CWController.sol:17"
          },
          {
            "contract": "CWController",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)12168",
            "src": "CWController.sol:19"
          },
          {
            "contract": "CWController",
            "label": "xBladeAddress",
            "type": "t_address",
            "src": "CWController.sol:20"
          },
          {
            "contract": "CWController",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CWController.sol:21"
          },
          {
            "contract": "CWController",
            "label": "mintPrice",
            "type": "t_uint256",
            "src": "CWController.sol:23"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IPancakeRouter02)12168": {
            "label": "contract IPancakeRouter02"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "abb36a49c34141a98a02ef95e3ceee62a3f6391a7f91f66f4cc17c18efb91382": {
      "address": "0xfF13b0408Eb32D5EB6509B4AaEbda8c6fEB1Fe9d",
      "txHash": "0x9b4f48a76ac4511b06ad5ab25efc9d62ac81082fb2d09e776032509fdf0b1951",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "CWController",
            "label": "game",
            "type": "t_address",
            "src": "CWController.sol:12"
          },
          {
            "contract": "CWController",
            "label": "reducePerMilestone",
            "type": "t_uint256",
            "src": "CWController.sol:13"
          },
          {
            "contract": "CWController",
            "label": "maxReduce",
            "type": "t_uint256",
            "src": "CWController.sol:14"
          },
          {
            "contract": "CWController",
            "label": "range",
            "type": "t_uint256",
            "src": "CWController.sol:15"
          },
          {
            "contract": "CWController",
            "label": "maxFactor",
            "type": "t_uint256",
            "src": "CWController.sol:17"
          },
          {
            "contract": "CWController",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)12178",
            "src": "CWController.sol:19"
          },
          {
            "contract": "CWController",
            "label": "xBladeAddress",
            "type": "t_address",
            "src": "CWController.sol:20"
          },
          {
            "contract": "CWController",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CWController.sol:21"
          },
          {
            "contract": "CWController",
            "label": "mintPrice",
            "type": "t_uint256",
            "src": "CWController.sol:23"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IPancakeRouter02)12178": {
            "label": "contract IPancakeRouter02"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "cbbfb112a148f426be069394a87f37fba16cc090b8f15f027b040b25f58fd027": {
      "address": "0xd353418ef96FDdEFF5693AfCaB03096B85070248",
      "txHash": "0x4a72f457ce98d66ec329d357d2dea5c782538ba8a2238ba7479fc4fde66b0051",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)22340_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "CryptoWars",
            "label": "characters",
            "type": "t_contract(Characters)11477",
            "src": "CryptoWars.sol:41"
          },
          {
            "contract": "CryptoWars",
            "label": "weapons",
            "type": "t_contract(Weapons)20963",
            "src": "CryptoWars.sol:42"
          },
          {
            "contract": "CryptoWars",
            "label": "xBlade",
            "type": "t_contract(IERC20)28214",
            "src": "CryptoWars.sol:43"
          },
          {
            "contract": "CryptoWars",
            "label": "randoms",
            "type": "t_contract(IRandoms)12214",
            "src": "CryptoWars.sol:44"
          },
          {
            "contract": "CryptoWars",
            "label": "pancakeRouter",
            "type": "t_contract(IPancakeRouter02)12178",
            "src": "CryptoWars.sol:45"
          },
          {
            "contract": "CryptoWars",
            "label": "minimumFightTax",
            "type": "t_uint256",
            "src": "CryptoWars.sol:46"
          },
          {
            "contract": "CryptoWars",
            "label": "supportFeeRate",
            "type": "t_uint8",
            "src": "CryptoWars.sol:47"
          },
          {
            "contract": "CryptoWars",
            "label": "staminaCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:112"
          },
          {
            "contract": "CryptoWars",
            "label": "mintCharacterFee",
            "type": "t_uint256",
            "src": "CryptoWars.sol:114"
          },
          {
            "contract": "CryptoWars",
            "label": "fightRewardBaseline",
            "type": "t_int128",
            "src": "CryptoWars.sol:120"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:123"
          },
          {
            "contract": "CryptoWars",
            "label": "lastBlockNumberCalled",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:125"
          },
          {
            "contract": "CryptoWars",
            "label": "fightXpGain",
            "type": "t_uint256",
            "src": "CryptoWars.sol:127"
          },
          {
            "contract": "CryptoWars",
            "label": "tokenRewards",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:129"
          },
          {
            "contract": "CryptoWars",
            "label": "xpRewards",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "CryptoWars.sol:130"
          },
          {
            "contract": "CryptoWars",
            "label": "oneFrac",
            "type": "t_int128",
            "src": "CryptoWars.sol:132"
          },
          {
            "contract": "CryptoWars",
            "label": "fightTraitBonus",
            "type": "t_int128",
            "src": "CryptoWars.sol:133"
          },
          {
            "contract": "CryptoWars",
            "label": "inGameOnlyFunds",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:135"
          },
          {
            "contract": "CryptoWars",
            "label": "totalInGameOnlyFunds",
            "type": "t_uint256",
            "src": "CryptoWars.sol:136"
          },
          {
            "contract": "CryptoWars",
            "label": "promos",
            "type": "t_contract(Promos)8360",
            "src": "CryptoWars.sol:138"
          },
          {
            "contract": "CryptoWars",
            "label": "_rewardsClaimTaxTimerStart",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "CryptoWars.sol:140"
          },
          {
            "contract": "CryptoWars",
            "label": "stakeFromGameImpl",
            "type": "t_contract(IStakeFromGame)12224",
            "src": "CryptoWars.sol:142"
          },
          {
            "contract": "CryptoWars",
            "label": "durabilityCostFight",
            "type": "t_uint8",
            "src": "CryptoWars.sol:144"
          },
          {
            "contract": "CryptoWars",
            "label": "burnWeaponFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:146"
          },
          {
            "contract": "CryptoWars",
            "label": "reforgeWeaponWithDustFee",
            "type": "t_int128",
            "src": "CryptoWars.sol:147"
          },
          {
            "contract": "CryptoWars",
            "label": "blacksmith",
            "type": "t_contract(Blacksmith)865",
            "src": "CryptoWars.sol:149"
          },
          {
            "contract": "CryptoWars",
            "label": "BUSDAddress",
            "type": "t_address",
            "src": "CryptoWars.sol:150"
          },
          {
            "contract": "CryptoWars",
            "label": "topupTimerBase",
            "type": "t_uint256",
            "src": "CryptoWars.sol:152"
          },
          {
            "contract": "CryptoWars",
            "label": "cwController",
            "type": "t_contract(CWController)1545",
            "src": "CryptoWars.sol:153"
          }
        ],
        "types": {
          "t_contract(Characters)11477": {
            "label": "contract Characters"
          },
          "t_contract(Weapons)20963": {
            "label": "contract Weapons"
          },
          "t_contract(IERC20)28214": {
            "label": "contract IERC20"
          },
          "t_contract(IRandoms)12214": {
            "label": "contract IRandoms"
          },
          "t_contract(IPancakeRouter02)12178": {
            "label": "contract IPancakeRouter02"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_int128": {
            "label": "int128"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_contract(Promos)8360": {
            "label": "contract Promos"
          },
          "t_contract(IStakeFromGame)12224": {
            "label": "contract IStakeFromGame"
          },
          "t_contract(Blacksmith)865": {
            "label": "contract Blacksmith"
          },
          "t_contract(CWController)1545": {
            "label": "contract CWController"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)22340_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)22340_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)26208_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)26208_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)25943_storage"
              }
            ]
          },
          "t_struct(Set)25943_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
